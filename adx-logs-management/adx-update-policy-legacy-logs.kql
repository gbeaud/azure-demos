//This version is designed for Firewalls with the "Structured logs" feature disabled: https://docs.microsoft.com/en-us/azure/firewall/firewall-preview#structured-firewall-logs-preview

// Create table to receive raw logs from Event Hub
.create table ['rawFirewallLogs']  (['records']:dynamic, ['EventProcessedUtcTime']:datetime, ['PartitionId']:int, ['EventEnqueuedUtcTime']:datetime)

// Create mapping command
.create table ['rawFirewallLogs'] ingestion json mapping 'rawFirewallLogs_mapping' '[{"column":"records", "Properties":{"Path":"$[\'records\']"}},{"column":"EventProcessedUtcTime", "Properties":{"Path":"$[\'EventProcessedUtcTime\']"}},{"column":"PartitionId", "Properties":{"Path":"$[\'PartitionId\']"}},{"column":"EventEnqueuedUtcTime", "Properties":{"Path":"$[\'EventEnqueuedUtcTime\']"}}]'

// Create function that will be used in the update policy
// Unstructured logs (i.e. if the feature "Structured logs" was not enabled in the Firewall https://docs.microsoft.com/en-us/azure/firewall/firewall-preview#structured-firewall-logs-preview
.create-or-alter function
 with (docstring = 'Parses raw records into strongly-typed columns', folder = 'UpdatePolicyFunctions')
     ExtractMyLogs_Unstructured()
    {
rawFirewallLogs
| mv-expand records
// Excluding structured logs
| where records.category in ("AzureFirewallApplicationRule", "AzureFirewallNetworkRule", "AzureFirewallDnsProxy")
// Parse the "msg" nested JSON item containing protocol, source/destination IP and port and action
// Match DNAT record
| parse records.properties.msg with Protocol_1 ' request from ' SourceHost_1 ':' SourcePort_1 ' to ' DestinationHost_1 ':' DestinationPort_1 ' was DNAT\'ed to ' DNATDestination '. Policy: ' Policy_1 '. Rule Collection Group: ' RCG_1 '. Rule Collection: ' RuleCollection_1 '. Rule: ' Rule_1
// Match logs if Network rule name logging was enabled on Firewall
| parse records.properties.msg with Protocol_2 ' request from ' SourceHost_2 ':' SourcePort_2 ' to ' DestinationHost_2 ':' DestinationPort_2 '. Action: ' Action_2 '. Policy: ' Policy_2 '. Rule Collection Group: ' RCG_2 '. Rule Collection: ' RuleCollection_2 '. Rule: ' Rule_2
// Match logs if Network rule name logging was not enabled on Firewall
| parse records.properties.msg with Protocol_3 ' request from ' SourceHost_3 ':' SourcePort_3 ' to ' DestinationHost_3 ':' DestinationPort_3 '. Action: ' Action_3 '.'
// ICMP logs
| parse records.properties.msg with Protocol_4 ' Type=8 request from ' SourceHost_4 ' to ' DestinationHost_4 '. Action: ' Action_4 '. Policy: ' Policy_4 '. Rule Collection Group: ' RCG_4 '. Rule Collection: ' RuleCollection_4 '. Rule: ' Rule_4
//Deny due to no match logs
| parse records.properties.msg with Protocol_5 ' request from ' SourceHost_5 ':' SourcePort_5 ' to ' DestinationHost_5 ':' DestinationPort_5 '. Action: ' Action_5 '. No rule matched. Proceeding with default action'
//Explicit deny logs
| parse records.properties.msg with Protocol_6 '  request from ' SourceHost_6 ':' SourcePort_6 '. Action: ' Action_6 '. Reason: ' DenyReason
//DNS proxy succesful request
| parse records.properties.msg with 'DNS Request: ' SourceHost_7 ':' SourcePort_7 ' - ' Unused_var ' ' DNSRequestType_7 ' IN ' HostName_7 '. ' Protocol_7 ' ' msg_7
//DNS proxy error
| parse records.properties.msg with ' Error: ' Unused_var ' ' HostName_8 '. ' DNSRequestType_8 ': IN ' Protocol_8 ' ' SourceHost_8 ':' SourcePort_8 '->' DestinationHost_8 ':' DestinationPort_8 ': ' msg_8
//ICMP logs without rule name logging enabled
| parse records.properties.msg with Protocol_9 ' Type=8 request from ' SourceHost_9 ' to ' DestinationHost_9 '. Action: ' Action_9 '.'
//Loose matching of ThreatIntel logs, keeping some unparsed information in the "msg" field
| parse records.properties.msg with Protocol_10 ' request from ' SourceHost_10 ':' SourcePort_10 ' to ' DestinationHost_10 ':' DestinationPort_10 '. Action: ' Action_10 '. ThreatIntel: ' msg_10
//Loose matching of IDPS logs, keeping some unparsed information in the "msg" field
| parse records.properties.msg with Protocol_11 ' request from ' SourceHost_11 ': to ' DestinationHost_11 ':. Action: ' Action_11 '. ' msg_11
//Match TCP logs if rule name logging was not enabled; this is NOT a duplicate of rule 3 as there is a whitespace at the end of some logs, which this rule is matching and not rule 3
| parse records.properties.msg with Protocol_12 ' request from ' SourceHost_12 ':' SourcePort_12 ' to ' DestinationHost_12 ':' DestinationPort_12 '. Action: ' Action_12 '. '
//Match messages that were not matched by previous rules; this ensures no logs are dropped by the update policy
| parse records.properties.msg with buffer
| extend
    Protocol = toupper(strcat(Protocol_1, Protocol_2, Protocol_3, Protocol_4, Protocol_5, Protocol_6, Protocol_7, Protocol_8, Protocol_9, Protocol_10, Protocol_11, Protocol_12)),
    SourceHost = strcat(SourceHost_1, SourceHost_2, SourceHost_3, SourceHost_4, SourceHost_5, SourceHost_6, SourceHost_7, SourceHost_8, SourceHost_9, SourceHost_10, SourceHost_11, SourceHost_12),
    SourcePort = strcat(SourcePort_1, SourcePort_2, SourcePort_3, SourcePort_5, SourcePort_6, SourcePort_7, SourcePort_8, SourcePort_10, SourcePort_12),
    DestinationHost = strcat(DestinationHost_1, DestinationHost_2, DestinationHost_3, DestinationHost_4, DestinationHost_5, DestinationHost_8, DestinationHost_9, DestinationHost_10, DestinationHost_11, DestinationHost_12),
    DestinationPort = strcat(DestinationPort_1, DestinationPort_2, DestinationPort_3, DestinationPort_5, DestinationPort_8, DestinationPort_10, DestinationPort_12),
    Action = strcat(Action_2, Action_3, Action_4, Action_5, Action_6, Action_9, Action_10, Action_11, Action_12),
    Policy = strcat(Policy_1, Policy_2, Policy_4),
    RCG = strcat(RCG_1, RCG_2, RCG_4),
    RuleCollection = strcat(RuleCollection_1, RuleCollection_2, RuleCollection_4),
    Rule = strcat(Rule_1, Rule_2, Rule_4),
    HostName = strcat(HostName_7, HostName_8),
    DNSRequestType = strcat(DNSRequestType_7, DNSRequestType_8),
    msg = strcat(msg_7, msg_8, msg_10, msg_11)
| project
    //Assign types to each item (string or int)
    todatetime(records.['time']),
    tostring(records.category),
    tostring(records.operationName),
    tostring(records.resourceId),
    tostring(Protocol),
    tostring(SourceHost),
    toint(SourcePort),
    tostring(DestinationHost),
    toint(DestinationPort),
    tostring(DNATDestination),
    tostring(Action),
    tostring(Policy),
    tostring(RCG),
    tostring(RuleCollection),
    tostring(Rule),
    tostring(DenyReason),
    tostring(DNSRequestType),
    tostring(HostName),
    tostring(msg),
    tostring(buffer)
}

// Create target table for unstrctured logs
.create table firewallLogs_unstructured (
    Timestamp:datetime,
    Category:string,
    OperationName:string,
    ResourceID:string,
    Protocol:string,
    SourceIP:string,
    SourcePort:int ,
    DestinationIP:string,
    DestinationPort:int,
    DNATDestination:string,
    Action:string,
    Policy:string,
    RuleCollectionGroup:string,
    RuleCollection:string,
    Rule:string,
    DenyReason:string,
    DNSRequestType:string,
    HostName:string,
    Message:string,
    Buffer:string
    )

// Adding update policy for unstrctured logs on the target table
.alter table firewallLogs_unstructured policy update
@'[{ "IsEnabled": true, "Source": "rawFirewallLogs", "Query": "ExtractMyLogs_Unstructured()", "IsTransactional": false, "PropagateIngestionProperties": false}]'