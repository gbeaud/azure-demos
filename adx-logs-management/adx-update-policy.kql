// Create table to receive raw logs from Event Hub
////////////////////////////////////////////////////////////
.create table ['rawFirewallLogs']  (['records']:dynamic, ['EventProcessedUtcTime']:datetime, ['PartitionId']:int, ['EventEnqueuedUtcTime']:datetime)


// Create mapping command
////////////////////////////////////////////////////////////
.create table ['rawFirewallLogs'] ingestion json mapping 'rawFirewallLogs_mapping' '[{"column":"records", "Properties":{"Path":"$[\'records\']"}},{"column":"EventProcessedUtcTime", "Properties":{"Path":"$[\'EventProcessedUtcTime\']"}},{"column":"PartitionId", "Properties":{"Path":"$[\'PartitionId\']"}},{"column":"EventEnqueuedUtcTime", "Properties":{"Path":"$[\'EventEnqueuedUtcTime\']"}}]'


// Create function that will be used in the update policy
// To add columns to the table by turning more raw logs into typed values: Add values at these two places below [1][2], then update the function [1], recreate/update the table schema [2] and update the policy [3]
////////////////////////////////////////////////////////////
.create-or-alter function
 with (docstring = 'Parses raw records into strongly-typed columns', folder = 'UpdatePolicyFunctions')
     ExtractMyLogs()
    {
    rawFirewallLogs
    | mv-expand records
    //| where records.category == "AzureFirewallNetworkRule"
    | project todatetime(records.['time']), tostring(records.category), tostring(records.operationName), tostring(records.resourceId), tostring(records.properties.msg) //[1]
}

// Create target table command
////////////////////////////////////////////////////////////
.create table networkFirewallLogs (Timestamp:datetime, Category:string, OperationName:string, ResourceID:string, Message:string) //[2]


// Adding update policy on the target table
//////////////////////////////////////////////////////////// [3]
.alter table networkFirewallLogs policy update
@'[{ "IsEnabled": true, "Source": "rawFirewallLogs", "Query": "ExtractMyLogs()", "IsTransactional": false, "PropagateIngestionProperties": false}]'
