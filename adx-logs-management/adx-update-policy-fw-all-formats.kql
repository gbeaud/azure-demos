//This version works whether you have enabled or not Network rule name logging (preview as of August 2022) on your Azure Firewall (https://docs.microsoft.com/en-us/azure/firewall/firewall-preview#network-rule-name-logging-preview). Enabling this feature adds new items to the "msg" field of the logs, including policy name, rule collection group, rule collection and rule name.

// Create table to receive raw logs from Event Hub
.create table ['rawFirewallLogs']  (['records']:dynamic, ['EventProcessedUtcTime']:datetime, ['PartitionId']:int, ['EventEnqueuedUtcTime']:datetime)

// Create mapping command
.create table ['rawFirewallLogs'] ingestion json mapping 'rawFirewallLogs_mapping' '[{"column":"records", "Properties":{"Path":"$[\'records\']"}},{"column":"EventProcessedUtcTime", "Properties":{"Path":"$[\'EventProcessedUtcTime\']"}},{"column":"PartitionId", "Properties":{"Path":"$[\'PartitionId\']"}},{"column":"EventEnqueuedUtcTime", "Properties":{"Path":"$[\'EventEnqueuedUtcTime\']"}}]'

// Create function that will be used in the update policy
.create-or-alter function
 with (docstring = 'Parses raw records into strongly-typed columns', folder = 'UpdatePolicyFunctions')
     ExtractMyLogs()
    {
rawFirewallLogs
| mv-expand records
// Parse the "msg" nested JSON item containing protocol, source/destination IP and port and action
// Match DNAT record
| parse records.properties.msg with Protocol_1 ' request from ' SourceHost_1 ':' SourcePort_1 ' to ' DestinationHost_1 ':' DestinationPort_1 ' was DNAT\'ed to ' DNATDestination '. Policy: ' Policy_1 '. Rule Collection Group: ' RCG_1 '. Rule Collection: ' RuleCollection_1 '. Rule: ' Rule_1
// Match logs if Network rule name logging was enabled on Firewall
| parse records.properties.msg with Protocol_2 ' request from ' SourceHost_2 ':' SourcePort_2 ' to ' DestinationHost_2 ':' DestinationPort_2 '. Action: ' Action_2 '. Policy: ' Policy_2 '. Rule Collection Group: ' RCG_2 '. Rule Collection: ' RuleCollection_2 '. Rule: ' Rule_2
// Match logs if Network rule name logging was not enabled on Firewall
| parse records.properties.msg with Protocol_3 ' request from ' SourceHost_3 ':' SourcePort_3 ' to ' DestinationHost_3 ':' DestinationPort_3 '. Action:' Action_3 '. '
// ICMP logs
| parse records.properties.msg with Protocol_4 ' Type=8 request from ' SourceHost_4 ' to ' DestinationHost_4 '. Action: ' Action_4 '. Policy: ' Policy_4 '. Rule Collection Group: ' RCG_4 '. Rule Collection: ' RuleCollection_4 '. Rule: ' Rule_4
//Deny due to no match logs
| parse records.properties.msg with Protocol_5 ' request from ' SourceHost_5 ':' SourcePort_5 ' to ' DestinationHost_5 ':' DestinationPort_5 '. Action: ' Action_5 '. No rule matched. Proceeding with default action'
//Explicit deny logs
| parse records.properties.msg with Protocol_6 '  request from ' SourceHost_6 ':' SourcePort_6 '. Action: ' Action_6 '. Reason: ' DenyReason
//SQL allow logs
//| parse records.properties.msg with Protocol_7 ' request from ' SourceHost_7 ':' SourcePort_7 ' to ' DestinationHost_7 ':' DestinationPort_7 '. Action: ' Action_7 '. Policy: ' Policy_7 '. Rule Collection Group: ' RCG_7 '. Rule Collection: ' RuleCollection_7 '. Rule: ' Rule_7
//SQL deny logs
//| parse records.properties.msg with Protocol_8 ' request from ' SourceHost_8 ':' SourcePort_8 ' to ' DestinationHost_8 ':' DestinationPort_8 '. Action: ' Action_8 '. No rule matched. Proceeding with default action'
| extend
    Protocol = strcat(Protocol_1, Protocol_2, Protocol_3, Protocol_4, Protocol_5, Protocol_6),
    SourceHost = strcat(SourceHost_1, SourceHost_2, SourceHost_3, SourceHost_4, SourceHost_5, SourceHost_6),
    SourcePort = strcat(SourcePort_1, SourcePort_2, SourcePort_3, SourcePort_5, SourcePort_6),
    DestinationHost = strcat(DestinationHost_1, DestinationHost_2, DestinationHost_3, DestinationHost_4, DestinationHost_5),
    DestinationPort = strcat(DestinationPort_1, DestinationPort_2, DestinationPort_3, DestinationPort_5),
    Action = strcat(Action_2, Action_3, Action_4, Action_5, Action_6),
    Policy = strcat(Policy_1, Policy_2, Policy_4),
    RCG = strcat(RCG_1, RCG_2, RCG_4),
    RuleCollection = strcat(RuleCollection_1, RuleCollection_2, RuleCollection_4),
    Rule = strcat(Rule_1, Rule_2, Rule_4)
| project
    //Assign types to each item (string or int)
    todatetime(records.['time']),
    tostring(records.category),
    tostring(records.operationName),
    tostring(records.resourceId),
    tostring(Protocol),
    tostring(SourceHost),
    toint(SourcePort),
    tostring(DestinationHost),
    toint(DestinationPort),
    tostring(DNATDestination),
    tostring(Action),
    tostring(Policy),
    tostring(RCG),
    tostring(RuleCollection),
    tostring(Rule),
    tostring(DenyReason)
}

// Create target table command
.create table networkFirewallLogs (
    Timestamp:datetime,
    Category:string,
    OperationName:string,
    ResourceID:string,
    Protocol:string,
    SourceIP:string,
    SourcePort:int ,
    DestinationIP:string,
    DestinationPort:int,
    DNATDestination:string,
    Action:string,
    Policy:string,
    RuleCollectionGroup:string,
    RuleCollection:string,
    Rule:string,
    DenyReason:string
    )

// Adding update policy on the target table
.alter table networkFirewallLogs policy update
@'[{ "IsEnabled": true, "Source": "rawFirewallLogs", "Query": "ExtractMyLogs()", "IsTransactional": false, "PropagateIngestionProperties": false}]'