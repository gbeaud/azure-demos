// Produces one single table for all structured logs
// This version is designed for Firewalls with the "Structured logs" feature enable: https://docs.microsoft.com/en-us/azure/firewall/firewall-preview#structured-firewall-logs-preview

// Create table to receive raw logs from Event Hub
.create table ['rawFirewallLogs']  (['records']:dynamic, ['EventProcessedUtcTime']:datetime, ['PartitionId']:int, ['EventEnqueuedUtcTime']:datetime)

// Create mapping command
.create table ['rawFirewallLogs'] ingestion json mapping 'rawFirewallLogs_mapping' '[{"column":"records", "Properties":{"Path":"$[\'records\']"}},{"column":"EventProcessedUtcTime", "Properties":{"Path":"$[\'EventProcessedUtcTime\']"}},{"column":"PartitionId", "Properties":{"Path":"$[\'PartitionId\']"}},{"column":"EventEnqueuedUtcTime", "Properties":{"Path":"$[\'EventEnqueuedUtcTime\']"}}]'

// Create function that will be used in the update policy
.create-or-alter function
 with (docstring = 'Parses raw records into strongly-typed columns', folder = 'UpdatePolicyFunctions')
     ExtractLogs_Structured()
    {
rawFirewallLogs
| mv-expand records
| project 
    // AZFWNetworkRule
    tostring(records.category),
    todatetime(records.['time']),
    tostring(records.resourceId),
    toupper(tostring(records.properties.Protocol)),
    tostring(records.properties.SourceIp),
    toint(records.properties.SourcePort),
    tostring(records.properties.DestinationIp),
    toint(records.properties.DestinationPort),
    tostring(records.properties.Action),
    tostring(records.properties.Policy),
    tostring(records.properties.RuleCollectionGroup),
    tostring(records.properties.RuleCollection),
    tostring(records.properties.Rule),
    tostring(records.properties.ActionReason),
    // AZFWApplicationRule
    tostring(records.properties.Fqdn),
    tostring(records.properties.TargetUrl),
    toboolean(records.properties.IsTlsInspected),
    tostring(records.properties.WebCategory),
    // AZFWNatRule
    tostring(records.properties.TranslatedIp),
    tostring(records.properties.TranslatedPort),
    // AZFWDnsQuery
    toint(records.properties.QueryId),
    tostring(records.properties.QueryType),
    tostring(records.properties.QueryClass),
    tostring(records.properties.QueryName),
    toint(records.properties.RequestSize),
    toboolean(records.properties.DnssecOkBit),
    toint(records.properties.EDNS0BufferSize),
    tostring(records.properties.ResponseCode),
    tostring(records.properties.ResponseFlags),
    toint(records.properties.ResponseSize),
    toreal(records.properties.RequestDurationSecs),
    toint(records.properties.ErrorNumber),
    tostring(records.properties.ErrorMessage),
    // AZFWInternalFqdnResolutionFailure
    tostring(records.properties.ServerIp),
    toint(records.properties.ServerPort),
    tostring(records.properties.Error),
    // AZFWThreatIntel
    tostring(records.properties.ThreatDescription),
    // AZFWIdpsSignature
    tostring(records.properties.SignatureId),
    tostring(records.properties.Category),
    tostring(records.properties.Description),
    toint(records.properties.Severity)
}

// Create target table for structured logs
.create table firewallLogs_structured (
    // AZFWNetworkRule
    Category:string,
    Timestamp:datetime,
    ResourceID:string,
    Protocol:string,
    SourceIP:string,
    SourcePort:int,
    DestinationIP:string,
    DestinationPort:int,
    Action:string,
    Policy:string,
    RuleCollectionGroup:string,
    RuleCollection:string,
    Rule:string,
    ActionReason:string,
    // AZFWApplicationRule
    FQDN:string,
    TargetURL:string,
    IsTLSInspected:bool,
    WebCategory:string,
    // AZFWNatRule
    TranslatedIP:string,
    TranslatedPort:string,
    // AZFWDnsQuery
    QueryId:int,
    QueryType:string,
    QueryClass:string,
    QueryName:string,
    RequestSize:int,
    DnssecOkBit:bool,
    EDNS0BufferSize:int,
    ResponseCode:string,
    ResponseFlags:string,
    ResponseSize:int,
    RequestDurationSecs:real,
    ErrorNumber:int,
    ErrorMessage:string,
    // AZFWInternalFqdnResolutionFailure
    ServerIp:string,
    ServerPort:int,
    Error:string,
    // AZFWThreatIntel
    ThreatDescription:string,
    // AZFWIdpsSignature
    SignatureId:string,
    IDPSCategory:string,
    Description:string,
    Severity:int
    )

// Update policy
// Every time new data lands in the "rawFirewallLogs" table, the function "ExtractLogs_Structured()" is called and imports data into the target table, "firewallLogs_structured"
.alter table firewallLogs_structured policy update
@'[{ "IsEnabled": true, "Source": "rawFirewallLogs", "Query": "ExtractLogs_Structured()", "IsTransactional": false, "PropagateIngestionProperties": false}]'